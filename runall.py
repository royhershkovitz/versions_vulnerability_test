from os import listdir, chdir, getcwd
from os.path import isfile, isdir, join
import subprocess, threading
import sys

filename = 'results.txt'
subdir = 'src'
def getSRC(path):
	out = getSRCHelper(path)
	if(out == -1):	
		for dir in listdir(path):
			sub = f'{path}/{dir}'			
			if(isdir(sub)):
				out = getSRCHelper(sub)
				break
	return out

def getSRCHelper(path):
	for dir in listdir(path):
		if(isdir(f'{path}/{dir}')):
			if(dir==subdir):
				if isfile(f'{path}/{dir}/{filename}'):
					files = []
					program = -1
					path = f'{path}/{dir}'
					for fname in listdir(path):
						if isfile(f'{path}/{fname}'):
							if fname.endswith('.py'):
								files.append(fname)
								program = 0
							elif fname.endswith('.java'):
								files.append(fname)
								program = 1
					return (path, program, files)
	return -1
	
#assignments =  ['Exercise 1 - Milestone 2', 'Exercise 1 - Milestone 2 - python']
#assignments =  ['Exercise 1 - Milestone 2']
assignments =  ['Exercise 1 - Milestone 2 - python']
#oscommad 	=  ['python main.py', 'javac {};java Main']
oscommad 	=  ['python main.py', 'java Main']
def collect_excutables():
	executables = []
	for assignment in assignments:
		for student in listdir(f'./{assignment}'):
			if(isdir(f'./{assignment}/{student}')):
				for submission in listdir(f'./{assignment}/{student}'):
					if(isdir(f'./{assignment}/{student}/{submission}')):
						output = getSRC(f'./{assignment}/{student}/{submission}')
						if output!=-1:
							executables.append(output)
	return executables

class Command(object):
	def __init__(self, cmd, path):
		self.cmd = cmd
		self.process = None
		self.path = path

	def run(self, timeout):
		def target():
			#print('Thread started', end="\r")	#print('\nThread started\n',getcwd())
			subprocess.Popen(["powershell.exe", f"Remove-Item {filename}"], cwd=self.path)
			psh = ["powershell.exe", self.cmd]
			print(psh)
			self.process = subprocess.Popen(psh, cwd=self.path)
			self.process.communicate()
			#print('Thread finished', end="\r")

		thread = threading.Thread(target=target)
		thread.start()

		thread.join(timeout)
		if thread.is_alive():
			#print('Terminating process', end="\r")
			self.process.terminate()
			thread.join()
		print(self.process.returncode)

time_sec = 10*60
def run_all():
	executables = collect_excutables()
	print(len(executables))
	count = 0
	for executable in executables:
		count += 1
		path = executable[0]
		print(f'{count}/{len(executables)} {path}')
		index = executable[1]
		files = ' '.join(executable[2])
		command = Command(oscommad[index].format(files), path)
		command.run(timeout=time_sec)

#java has some stupid bug
def termStr_all():
	executables = collect_excutables()
	output = []
	for executable in executables:
		path = executable[0]
		index = executable[1]
		files = ' '.join(executable[2])
		output.append(f'cd "{path}";{oscommad[index].format(files)}')
	return f';cd "{getcwd()}";'.join(output)

#print(termStr_all())
run_all()