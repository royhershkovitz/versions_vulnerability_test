from multiprocessing import Pool

class Entry(object):
	def __init__(self, name, version):
		self.name = name.strip()
		self.version = version.strip()
        
	def __repr__(self):
		return 'name:*%s* vr:*%s*' % (self.name, self.version)

class PIPEntry(Entry):
  def __init__(self, toParse):
    toParse = toParse.split('==')
    name = toParse[0]
    version = toParse[1]
    Entry.__init__(self, name, version)

def processPIP(lst):
    p = Pool(5)
    return p.map(PIPEntry, lst)

def findXOccurance(string, i, c, x):
  if x==0:
    return i
  found = False
  while i < len(string):
    if string[i]==c:
      if not found:
        x-=1
        found = True
        if x==0:
          return i
    else:
      found = False
    i+=1
  return -1

#list of table heads and content
class ParserWIN(object):
  def __init__(self, lst):    
    dashes = lst[1]
    #print(lst[:3])
    #print(dashes)
    self.versionIndex = findXOccurance(dashes, 0, '-', 2)
    #print(self.versionIndex)
    p = Pool(5)
    self.out = p.map(self.winentry, lst[2:])
  
  def winentry(self, Str):
    name = Str[:self.versionIndex].strip()
    if Str[self.versionIndex] == ' ':
      version = ''
    else:
      i = self.versionIndex
      while Str[i] != ' ':
        i+=1        
      version = Str[self.versionIndex:i]
    return Entry(name, version)

def processWindows(lst):
  pw = ParserWIN(lst)
  return pw.out

class LinuxEntry(Entry):
  def __init__(self, toParse):
    toParse = toParse.split()
    name = toParse[1]
    version = toParse[2]
    Entry.__init__(self, name, version)

def processLinux(lst):
    p = Pool(5)
    return p.map(LinuxEntry, lst)
