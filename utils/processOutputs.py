from multiprocessing import Pool

class Entry(object):
	def __init__(self, name, version):
		self.name = name.strip()
		self.version = version.strip()
        
	def __repr__(self):
		return 'name:*%s* vr:*%s*' % (self.name, self.version)

class PIPEntry(Entry):
  def __init__(self, toParse):
    toParse = toParse.split('==')
    name = toParse[0]
    version = toParse[1]
    Entry.__init__(self, name, version)

def processPIP(lst):
    p = Pool(5)
    return p.map(PIPEntry, lst)

def findXOccurance(string, i, c, x):
  if x==0:
    return i
  found = False
  while i < len(string):
    if string[i]==c:
      if not found:
        x-=1
        found = True
        if x==0:
          return i
    else:
      found = False
    i+=1
  return -1

spam_text = ['version', '(x64)', '(64-bit)', 'en-US', 'en-us', '-', '(amd64)', '(32-bit x86)', '(x86)', '(x86_64)', '(32bit x86)']
#list of table heads and content
class ParserWIN(object):
  def __init__(self, lst):    
    dashes = lst[1]
    #print(lst[:3])
    #print(dashes)
    self.versionIndex    = findXOccurance(dashes, 0, '-', 2)
    self.versionIndexEnd = findXOccurance(dashes, self.versionIndex, '-', 2)
    #print(self.versionIndex)
    p = Pool(5)
    self.out = p.map(self.winentry, lst[2:])

  def isVersion(self, ver):
    return len(ver.split('.')) > 1
  
  def winentry(self, Str):
    name    = Str[:self.versionIndex].strip()
    version = Str[self.versionIndex:self.versionIndexEnd].strip()
    #remove version from name
    clean_name = []
    for a in name.split(' '):
      if not self.isVersion(a):
        clean_name.append(a)
    name = ' '.join(clean_name)
  
    name = name.replace('.', ' ')#windows store format
    name = name.replace('_', ' ')#some names
    
    #remove spam text
    for txt in spam_text:
      name = name.replace(txt, '')
      name = name.replace('  ', ' ')
    return Entry(name, version)
  
def equals(e1, e2):
  return e1.name == e2.name and e1.version == e2.version

def processWindows(lst):
  pw = ParserWIN(lst)
  j = 0
  #win process remove doubles and remove version from name
  if not pw.out[0].name:
      pw.out.pop(0)
      j += 1
  for i in range(1, len(pw.out)):
    if not pw.out[i-j].name or equals(pw.out[i-j], pw.out[i-j - 1]):
      pw.out.pop(i-j)
      j += 1
  return pw.out

class LinuxEntry(Entry):
  def __init__(self, toParse):
    toParse = toParse.split()
    name = toParse[1]
    version = toParse[2]
    Entry.__init__(self, name, version)

def processLinux(lst):
    p = Pool(5)
    return p.map(LinuxEntry, lst)
