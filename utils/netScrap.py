from HTTP_TOOL import get, post
import lxml.html as lh
import json
import pandas as pd

url_serach_name = 'https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword=%s'
url_serach_cve = 'https://cve.circl.lu/api/cve/%s'
table = 'table'
thead = 'thead'
open_xml = '<'
close_xml = '>'
def get_just_table(text, fields):
    start = 0
    end = len(text)
    while start < end:
        i = text.find(table,start,end)
        tmp_end = text.find(table, i+len(table), end)
        tmp_end = text.find(close_xml, tmp_end, end)
        tmp_start = text.rfind(open_xml,start,i)  
        all = True
        for field in fields:
            if all and text.find(field,tmp_start,tmp_end) == -1:
                all = False
        if all:
            return text[tmp_start:tmp_end+1]
        start = tmp_end
    return ''

def exploreHTML(text):
    doc  = lh.fromstring(text)
    tr_elements = doc.xpath('//tr')
    #print(tr_elements)
    j = 0
    for t in tr_elements:
        i=0
        for t2 in t:
            name=t2.text_content()
            print('%d %d:"%s"'%(j,i,name))
            i+=1
        j+=1

def harvestHTMLtable(text, fields):
    text = get_just_table(text, fields)
    #print(text)
    #exploreHTML(text)
    doc  = lh.fromstring(text)
    tr_elements = doc.xpath('//tr')
    out = []
    for i in range(1, len(tr_elements)):
        x = {}
        j = 0
        for field in fields:
            x[field] = tr_elements[i][j].text_content().strip()
            j += 1
        out.append(x)
    return out

cve_fields = ['Published', 'access', 'impact', 'assigner', 'id', 'vulnerable_product', 'summary']
cve_fields_print = [ 'id', 'summary', 'assigner', 'Published', 'access', 'impact']
#"access": { "authentication": "NONE",  "complexity": "LOW", "vector": "NETWORK" }
#"impact": { "availability": "PARTIAL", "confidentiality": "NONE", "integrity": "NONE" }
def get_cve(cve_name):
    c = json.loads(get(url_serach_cve % cve_name))
    x = {}
    for field in cve_fields:
        x[field] = c[field]
    return x

def hasVersion(verText, name, vr):
    verArr = verText.split(':')
    i = 0
    while i < len(verArr) and verArr[i]!=name:
        i += 1
    if i + 1 > len(verArr):
        return False
    
    noDots = verText[i+1].split('.')
    noDots2 = vr.split('.')
    i = 0
    while i < len(noDots) and i < len(noDots2):
        if noDots[i] != noDots2[i]:
            return False
        i+=1

    return True

def hasVersions(versions, name, vr):
    for verText in versions:
        if hasVersion(verText, name, vr):
            return True
    return False

#get cves and verify version
def look_entry(entry):
    entry_cves = harvestHTMLtable(get(url_serach_name % entry.name), ['Name', 'Description'])
    out = []
    for cve in entry_cves:
        c = get_cve(cve['Name'])
        #TODO remove ** REJECTED **
        if(hasVersions(c['vulnerable_product'], entry.name, entry.version)):
            out.append(c)
    return out

if __name__ == "__main__":
    entry_cves = harvestHTMLtable(get(url_serach_name % 'numpy'), ['Name', 'Description'])
    out = []
    for cve in entry_cves:
        c = get_cve(cve['Name'])
        #if(hasVersions(c['vulnerable_product'], 'numpy', '0.2.2')):
        out.append(c)
        
    #for c1 in c:
    #    print(c1)

    with pd.option_context('display.max_rows', None, 'display.max_columns', None):  # more options can be specified also
        print(pd.DataFrame(out, columns=cve_fields_print))

