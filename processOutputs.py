from multiprocessing import Pool

class Entry(object):
	def __init__(self, name, version):
		self.name = name
		self.version = version
        
	def __repr__(self):
		return 'name:*%s* vr:*%s*' % (self.name, self.version)

class PIPEntry(Entry):
  def __init__(self, toParse):
    toParse = toParse.split('==')
    name = toParse[0]
    version = toParse[1]
    Entry.__init__(self, name, version)

def processPIP(lst):
    p = Pool(5)
    return p.map(PIPEntry, lst)

class WinEntry(Entry):
  def __init__(self, toStr):
    toParse = toStr.split()
    i = 0
    while i < len(toParse) and not isVersion(toParse[i]):
      i += 1
    if i == len(toParse):
      print(toStr)
      name = ' '.join(toParse)
      version = '?'
    else:
      name = ' '.join(toParse[:i])
      version = toParse[i]
    Entry.__init__(self, name, version)

exception_chars = ['-', 'r', 'f']
def isVersion(string):
  DOT = 0
  NUM = 1
  STATE = DOT
  ISDOT = False
  i = 0
  while i < len(string):
    if string[i] == '.':
      if STATE == DOT:
        return False
      STATE = DOT
      ISDOT = True
    elif string[i] >= '0' and string[i] <= '9':
      STATE = NUM
    elif i in exception_chars:
        pass
    else:
      return False
    i += 1
  return STATE == NUM and ISDOT

def processWindows(lst):
  p = Pool(5)
  return p.map(WinEntry, lst)

class LinuxEntry(Entry):
  def __init__(self, toParse):
    toParse = toParse.split()
    name = toParse[1]
    version = toParse[2]
    Entry.__init__(self, name, version)

def processLinux(lst):
    p = Pool(5)
    return p.map(LinuxEntry, lst)
