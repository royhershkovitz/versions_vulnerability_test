from threading import Thread
from subprocess import Popen, PIPE

#the threading is to support time out
class Command(object):
	def __init__(self, cmd, path):
		self.cmd = cmd
		self.process = None
		self.path = path
		self.output = 'not executed'

	def readyPOPENOutput(self, tuple):
		if tuple:
			(output,_) = tuple
			output = output.strip()
			return output.split('\n')
		else:
			print('no output')
			exit(-2)
	
	#timeout is in seconds
	def run(self, timeout):
		self.output = 'not finished'
		def target():
			#print('Thread started', end="\r")	#print('\nThread started\n',getcwd())
			print(self.cmd)
			self.process = Popen(self.cmd, cwd=self.path, stdout=PIPE)			
			self.output = self.process.communicate()
			#print('Thread finished', end="\r")

		thread = Thread(target=target)
		thread.start()

		thread.join(timeout)
		if thread.is_alive():
			#print('Terminating process', end="\r")
			self.process.terminate()
			thread.join()
		print(self.process.returncode)
		return self.readyPOPENOutput(self.output)

#use
#psh = ["powershell.exe", args...]
#command = Command(cmd, path)
#command.run(timeout=time_sec)