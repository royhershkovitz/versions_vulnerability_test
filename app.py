import os, platform, getopt, sys
from utils.command import Command
from utils.netScrap import look_entries, printTable
from utils.processOutputs import harvestWindows, harvestLinux, harvestDarwin, processPIP

def getPIPFreeze(PIP3):
    platform_name = platform.system()
    platform_name = platform_name.lower()
    if platform_name == 'windows':
        cmd = ["powershell.exe"]
    elif platform_name == 'linux' or platform_name == 'darwin':
        cmd = ["sh", "-c"]
    else:
        print("The OS %s is not supported!" % platform.system())
        sys.exit(-1)
    if PIP3:
        cmd.append("pip3 freeze")
    else:
        cmd.append("pip freeze")
    command = Command(cmd, '.')
    output = command.run(timeout=100)
    #print(output[0])
    #print(output[-1])
    return processPIP(output)

def getInstalledProgram():
    platform_name = platform.system()
    print("Your OS is %s" % platform_name)
    platform_name = platform_name.lower()
    if platform_name == 'windows':
        output = harvestWindows()
    elif platform_name == 'linux':
        output = harvestLinux()
    elif platform_name == 'darwin':
        output = harvestDarwin()
    else:
        print("The OS %s is not supported!" % platform_name)
        sys.exit(-1)
    return output

def runPIP(TOP, Fast_mode, PIP3=False):    
    pipEntries = getPIPFreeze(PIP3)
    print(pipEntries[0], '_', pipEntries[-1])
    #print('\n'.join(str(x) for x in pipEntries)
    if PIP3:
        print('python pip3 packages', len(pipEntries))
    else:
        print('python pip packages', len(pipEntries))
    lst = look_entries(pipEntries, fast=Fast_mode, TOP=TOP)
    print('Summarize pip')
    printTable(lst, True, Short=Fast_mode)

def runOS(TOP, Fast_mode):
    installedEntries = getInstalledProgram()
    #print(installedEntries[0], installedEntries[-1])
    #print('\n'.join(str(x) for x in installedEntries))
    print('OS programs', len(installedEntries))
    lst = look_entries(installedEntries, fast=Fast_mode, TOP=TOP)
    print('Summarize OS')
    printTable(lst, Short=Fast_mode)

def getFileQuery(f_name):
    f = open(f, "r")
    content = f.read()
    content = content.strip()
    content = content.split('\n')
    out = []
    for a in content:#remove empty lines
        if a:
            out.append(a)
    
    return processPIP(out)

def parseFile(TOP, Fast_mode, f_name):
    fileEntries = getFileQuery(f_name)
    print(fileEntries[0], '_', fileEntries[-1])
    #print(fileEntries)
    print('file packages', len(fileEntries))
    lst = look_entries(fileEntries, fast=Fast_mode, TOP=TOP)
    print('Summarize file')
    printTable(lst, Short=Fast_mode)

default_argv = ['-po']
def main(argv):
    if len(argv) == 0:
        argv = default_argv

    try:
        opts, args = getopt.getopt(argv,"hopmxf:t:")
    except getopt.GetoptError:
        print ('usage app.py -f <inputfile> or app.py -po')
        sys.exit(-2)

    #todo fast mode only scan cve.mitre.org -x
    TOP = 50
    Fast_mode = False
    for opt, arg in opts:
        if opt == '-t':
            TOP = int(arg)
        if opt == '-x':
            Fast_mode = True
    
    for opt, arg in opts:
        if opt == '-h':
            print ('usage app.py -f <inputfile> or app.py -po\np is system python-pip packages\no is os packages\nf is file input\nm is for pip3(terminal alias)\nt amount of cve to check per name (default is 20)\nx fast mode - far less precise')
            sys.exit(-1)
        elif opt in ("-p"):
            runPIP(TOP, Fast_mode)
        elif opt in ("-m"):
            runPIP(TOP, Fast_mode, PIP3=TRUE)
        elif opt in ("-o"):
            runOS(TOP, Fast_mode)
        elif opt in ("-f"):
            if not os.path.exists(arg):
                print (f'file {arg} does not exist!')
                sys.exit(-1)
            if not os.path.isfile(arg):
                print (f'{arg} is not a file!')
                sys.exit(-1)
            parseFile(TOP, Fast_mode, arg)
        print('\n')

if __name__ == "__main__":
   main(sys.argv[1:])