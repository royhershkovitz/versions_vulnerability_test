import os, platform, getopt, sys
from utils.command import Command
from utils.netScrap import look_entries, printTable
from utils.processOutputs import harvestWindows, harvestLinux, harvestDarwin, processPIP

def getPIPFreeze(PIP3):
    platform_name = platform.system()
    platform_name = platform_name.lower()
    if platform_name == 'windows':
        cmd = ["powershell.exe"]
    elif platform_name == 'linux' or platform_name == 'darwin':
        cmd = ["sh", "-c"]
    else:
        print("The OS %s is not supported!" % platform.system())
        exit(-1)
    if PIP3:
        cmd.append("pip3 freeze")
    else:
        cmd.append("pip freeze")
    command = Command(cmd, '.')
    output = command.run(timeout=100)
    #print(output[0])
    #print(output[-1])
    return processPIP(output)

def getInstalledProgram():
    platform_name = platform.system()
    print("Your OS is %s" % platform_name)
    platform_name = platform_name.lower()
    if platform_name == 'windows':
        output = harvestWindows()
    elif platform_name == 'linux':
        output = harvestLinux()
    elif platform_name == 'darwin':
        output = harvestDarwin()
    else:
        print("The OS %s is not supported!" % platform_name)
        exit()
    return output

def runPIP(PIP3=False):    
    pipEntries = getPIPFreeze(PIP3)
    print(pipEntries[0], '_', pipEntries[-1])
    #print('\n'.join(str(x) for x in pipEntries)
    print('python pip packages', len(pipEntries))
    lst = look_entries(pipEntries)
    print('Summarize pip')
    printTable(lst)

def runOS():
    installedEntries = getInstalledProgram()
    #print(installedEntries[0], installedEntries[-1])
    #print('\n'.join(str(x) for x in installedEntries))
    print('OS programs', len(installedEntries))
    lst = look_entries(installedEntries)
    print('Summarize OS')
    printTable(lst)

def getFileQuery(f_name):
    f = open(f, "r")
    content = f.read()
    content = content.strip()
    content = content.split('\n')
    out = []
    for a in content:#remove empty lines
        if a:
            out.append(a)
    
    return processPIP(out)

def parseFile(f_name):
    fileEntries = getFileQuery(f_name)
    print(fileEntries[0], '_', fileEntries[-1])
    #print(fileEntries)
    print('file packages', len(fileEntries))
    lst = look_entries(fileEntries)
    print('Summarize file')
    printTable(lst)


default_argv = ['-po']
def main(argv):
    #print(argv)
    if len(argv) == 0:
        argv = default_argv
    try:
        opts, args = getopt.getopt(argv,"hopf:")
    except getopt.GetoptError:
        print ('usage app.py -f <inputfile> or app.py -po')
        sys.exit(-2)
    for opt, arg in opts:
        if opt == '-h':
            print ('usage app.py -f <inputfile> or app.py -po\np is system python-pip packages\no is os packages\nf is file input\nm is for pip3(terminal alias)')
            sys.exit()
        elif opt in ("-p"):
            runPIP()
        elif opt in ("-m"):
            runPIP(PIP3=TRUE)
        elif opt in ("-o"):
            runOS()
        elif opt in ("-f"):
            if not os.path.exists(arg):
                print (f'file {arg} does not exist!')
                sys.exit(-1)
            if os.path.isdir(arg):
                print (f'{arg} is a directory!')
                sys.exit(-1)
            parseFile(arg)
        print('\n')

if __name__ == "__main__":
   main(sys.argv[1:])